{"version":3,"sources":["App.js","Header.js","Footer.js","serviceWorker.js","index.js"],"names":["App","props","state","actProj","projSelect","bind","proj","this","setState","ProjInfo","welcome","className","algorithms","href","fortCook","rivgam","id","type","onClick","React","Component","Header","src","alt","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAwCeA,G,wDApCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAS,WAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALF,E,uDAQNC,GACVC,KAAKC,SAAS,CACZL,QAASG,M,+BAIJ,IAAD,OACAG,EAAW,CACfC,QAAS,6BAAK,wBAAIC,UAAU,YAAd,2BAAqD,uBAAGA,UAAU,YAAb,0CACnEC,WAAY,6BAAK,wBAAID,UAAU,YAAd,cAAwC,uBAAGA,UAAU,YAAb,wKAA6L,uBAAGE,KAAK,2CAAR,UACtPC,SAAU,6BAAK,wBAAIH,UAAU,YAAd,kBAA4C,uBAAGA,UAAU,YAAb,4CAC3DI,OAAQ,6BAAK,wBAAIJ,UAAU,YAAd,aAAuC,uBAAGA,UAAU,YAAb,oCAEtD,OACE,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBAAgBK,GAAG,YAChC,4BAAQC,KAAK,SAASC,QAAS,kBAAM,EAAKd,WAAW,eAAeO,UAAU,0BAA9E,cACA,4BAAQM,KAAK,SAASC,QAAS,kBAAM,EAAKd,WAAW,aAAaO,UAAU,0BAA5E,kBACA,4BAAQM,KAAK,SAASC,QAAS,kBAAM,EAAKd,WAAW,WAAWO,UAAU,0BAA1E,cAEF,yBAAKA,UAAU,YAAYK,GAAG,YAC3BP,EAASF,KAAKL,MAAMC,e,GA9BbgB,IAAMC,Y,MCcTC,MAdf,WACE,OACE,yBAAKV,UAAU,0BACb,yBAAKA,UAAU,MAAMK,GAAG,OACtB,yBAAKL,UAAU,aACf,yBAAKA,UAAU,YACb,yBAAKW,IAAI,WAAWC,IAAI,OAAOP,GAAG,OAAOL,UAAU,oBAErD,yBAAKA,UAAU,gB,MCSRa,MAjBf,WACE,OACE,yBAAKb,UAAU,UACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACf,yBAAKA,UAAU,oBACb,wDACA,uBAAGE,KAAK,yBAAyBF,UAAU,WAAU,uBAAGA,UAAU,yBAAlE,yBACA,uBAAGE,KAAK,+BAA+BF,UAAU,WAAU,uBAAGA,UAAU,kBAAxE,qBCAQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0b777f0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      actProj: \"welcome\"\n    }\n    this.projSelect = this.projSelect.bind(this);\n  }\n  /*method to change state*/\n  projSelect (proj) {\n    this.setState({\n      actProj: proj\n    });\n  }\n\n  render(){\n    const ProjInfo = {\n      welcome: <div><h3 className=\"projtext\">Welcome to my portfolio</h3><p className=\"projtext\">Please select a project from the left</p></div>,\n      algorithms: <div><h3 className=\"projtext\">Algorithms</h3><p className=\"projtext\">this is a collection of algorithms I orignally wrote while learning Javascript at FreeCodeCamp, but I later made them into a page to practice react with.  Find them <a href=\"https://guy-black.github.io/algorithms/\">here</a></p></div>,\n      fortCook: <div><h3 className=\"projtext\">Fortune Cookie</h3><p className=\"projtext\">information about my fortune cookie app</p></div>,\n      rivgam: <div><h3 className=\"projtext\">Kids Game</h3><p className=\"projtext\">information about my kids game</p></div>\n    }\n    return (\n      <div className=\"App row\">\n        <div className=\"col-xs-2 well\" id=\"projlist\">\n          <button type=\"button\" onClick={() => this.projSelect(\"algorithms\")} className=\"btn btn-block projlink\">Algorithms</button>\n          <button type=\"button\" onClick={() => this.projSelect(\"fortCook\")} className=\"btn btn-block projlink\">Fortune Cookie</button>\n          <button type=\"button\" onClick={() => this.projSelect(\"rivgam\")} className=\"btn btn-block projlink\">Kids Game</button>\n        </div>\n        <div className=\"col-xs-10\" id=\"projDeet\">\n          {ProjInfo[this.state.actProj]}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"Header container-fluid\">\r\n      <div className=\"row\" id=\"why\">\r\n        <div className=\"col-xs-2\"></div>\r\n        <div className=\"col-xs-8\">\r\n          <img src=\"logo.svg\" alt=\"logo\" id=\"logo\" className=\"img-responsive\"/>\r\n        </div>\r\n        <div className=\"col-xs-2\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div className=\"jumbotron\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-10\"></div>\r\n          <div className=\"col-xs-2 contact\">\r\n            <b>Contact:&nbsp;&nbsp;&nbsp;&nbsp; </b>\r\n            <a href=\"mailto: guyb@gmail.com\" className=\"contact\"><i className=\"fas fa-envelope-open\"></i>&nbsp;  Email &nbsp; &nbsp;</a>\r\n            <a href=\"https://github.com/guy-black\" className=\"contact\"><i className=\"fab fa-github\"></i>&nbsp;  Github</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport Header from './Header.js'\nimport Footer from './Footer.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}